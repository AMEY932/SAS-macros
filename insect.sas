 /********************************************************************/ 
 /* NAME: INSECT       SYSTEM:         PGMR: BLODGETT                */ 
 /* FUNCTION: UTILITY SUB-MACRO INVOKED BY PTINPOL.                  */ 
 /* THIS MODULE WILL DETERMINE WHETHER TWO LINE SEGMENTS INTERSECT AND  
  CALCULATES THE X-Y COORDINATES OF THE INTERSECTION.  IF LINES ARE     
  OVERLAPPING THE _COFLAG VARIABLE (COLINEAR FLAG) IS SET TO 1.         
  CODED BY JOHN BLODGETT MODELED AFTER ALGORITHM TAKEN FROM THE         
  DACS PROGRAM WRITTEN BY THE CENSUS USE STUDY (FARNSWORTH & WHITE)     
  CIRCA 1971.                                                        */ 
 /*                                                                  */ 
 /* LAST REVISED: 20APR90, JGB   */                                     
 /* STATUS: TEST UNDER MVS (ORIGINAL DEVELOPMENT UNDER 6.03).        */ 
 /* RELATED MODULES: %PTINPOL, %INWHICH                              */ 
 /*                                                                  */ 
 /********************************************************************/ 
                                                                        
 /********************************************************************/ 
 /* BEGIN MACRO DEFINITION                                           */ 
 /********************************************************************/ 
%MACRO INSECT(                                                          
 MODE=INLINE,  /* DEFAULT MODE VALUE RESULTS IN GENERATION OF "INLINE"  
      CODE, SUITABLE FOR APPLICATIONS WHERE YOU ONLY NEED TO INVOKE     
      THE ALGORITHM ONLY ONCE IN A DATA STEP.  SPECIFY A VALUE OF       
      "LINKED" TO CAUSE GENERATION OF A LINKED-TO ROUTINE NAMED INSECT. 
      SEE SAMPLE INVOCATIONS BELOW */                                   
 ENDSTMT=ENDINSCT, /* WHEN MODE=INLINE CONTROL TRANSFERS TO THIS STMT   
      WHEN CALCULATIONS ARE FINISHED.  THE ENDINSCT LABEL WILL BE       
      GENERATED BY THE MACRO.  ANY OTHER VALUE REQUIRES THE USER TO     
      CODE THE LABEL IN THE INVOKING PROGRAM. */                        
 XYVARS=L1X1 L1Y1 L1X2 L1Y2 L2X1 L2Y1 L2X2 L2Y2, /* A LIST OF 8 VARIABLE
      NAMES TO BE USED.  THESE VARIABLES CONTAINS THE X,Y COORDINATES   
      OF THE END POINTS OF THE 2 LINES (INPUT VALUES.)  THE ORDER IS    
      CRITICAL: FIRST LINE, FIRST POINT, X-Y FOLLOWED BY FIRST LINE,    
      2ND POINT, X-Y FOLLOWED BY SAME PATTERN FOR SECOND LINE */        
 XX=XX, YX=YX, /* NAMES OF VARIABLES WHERE INTERSECTION COORDINATES ARE 
      TO BE STORED.  WILL BE SET TO MISSING IF NO INTERSECTION OR IF    
      LINES ARE COLINEAR. IF COLINEAR THEY WILL BE SET TO .C */         
 DROPVARS=1, /* OPTION TO DROP "WORK" VARIABLES USED BY ROUTINE.  THE   
      ONLY TIME YOU SHOULD SAY DROPVARS=0 IS IF YOU ARE INVOKING THE    
      ROUTINE IN IN-LINE MODE MORE THAN ONCE IN A DATA STEP (TO AVOID   
      DUPLICATE DROP STATEMENTS) */                                     
 DEBUG=0);                                                              
                                                                        
 %LET MODE=%UPCASE(&MODE);                                              
 %IF &MODE=LINKED %THEN %DO;                                            
   RETURN;                                                              
 INSECT: *---LINKED-TO ROUTINE GENERATED BY INSECT MACRO---*;           
  %END;                                                                 
  %LET XYVARS=%UPCASE(&XYVARS);                                         
   %LET L1X1=%SCAN(&XYVARS,1);  %LET L1Y1=%SCAN(&XYVARS,2);             
   %LET L1X2=%SCAN(&XYVARS,3);  %LET L1Y2=%SCAN(&XYVARS,4);             
   %LET L2X1=%SCAN(&XYVARS,5);  %LET L2Y1=%SCAN(&XYVARS,6);             
   %LET L2X2=%SCAN(&XYVARS,7);  %LET L2Y2=%SCAN(&XYVARS,8);             
 %IF &L2Y2 EQ %THEN %DO;                                                
   %PUT *****XYVARS PARM MUST HAVE 8 ELEMENTS (4 COORDINATE PAIRS);     
   =================INTENTIONAL GARABAGE TO ABORT=================      
   %GOTO ENDMAC;                                                        
   %END;                                                                
                                                                        
 %IF &DEBUG %THEN %DO;  %*--DISPLAY PARMS--;                            
   %PUT ****PARMS SPECIFIED AND/OR ASSIGNED****;                        
   %PUT MODE= &MODE;  %PUT ENDSTMT= &ENDSTMT;  %PUT XYVARS= &XYVARS;    
   %PUT L1X1=&L1X1  L1Y1=&L1Y1  L1X2=&L1X2  L1Y2=&L1Y2;                 
   %PUT L2X1=&L2X1  L2Y1=&L2Y1  L2X2=&L2X2  L2Y2=&L2Y2;                 
   %PUT XX=&XX  YX=&YX;                                                 
   %PUT DROPVARS= &DROPVARS;                                            
   %PUT;                                                                
   %END;                                                                
                                                                        
 %MACRO _GOBACK; %*---UTILITY SUBMACRO TO EXECUTE A "RETURN"--;         
   %IF &MODE=LINKED %THEN %STR( RETURN);                                
    %ELSE %STR( GO TO &ENDSTMT);                                        
   %MEND _GOBACK;                                                       
                                                                        
 &XX=.;  &YX=.;  *--INITIALIZE INTERSCTING POINT;                       
 _COFLAG=0;      *--INITIALIZE COLINEARITY FLAG;                        
 *--CROSS-PRODUCT CALCULATION--;                                        
 _ACX=&L1X1 - &L2X1;   _ACY=&L1Y1 - &L2Y1;                              
 _ADX=&L1X1 - &L2X2;   _ADY=&L1Y1 - &L2Y2;                              
 _BCX=&L1X2 - &L2X1;   _BCY=&L1Y2 - &L2Y1;                              
 _BDX=&L1X2 - &L2X2;   _BDY=&L1Y2 - &L2Y2;                              
 _A1=_ACX * _ADY - _ACY * _ADX;                                         
 _A2=_BCX * _BDY - _BCY * _BDX;                                         
 IF _A1*_A2 GT 0 THEN %_GOBACK;                                         
 _R=(_ACX*_BCY - _ACY*_BCX) * (_ADX*_BDY - _ADY*_BDX);                  
 IF _R GT 0 THEN %_GOBACK;                                              
 IF _A1 EQ 0 AND _A2 EQ 0 THEN DO;                                      
   *--CHECKING FOR CO-LINEARITY--;                                      
   IF _ACX * _BCX LT 0 OR _ACX*_BDX LT 0 THEN DO;                       
     &XX=.;  &YX=.;  _COFLAG=1;                                         
     END;                                                               
   *--FOLLOWING CHECK FOR OVERLAPPING VERTICAL LINES WAS NOT IN THE     
      ORIGINAL INSECT CODE--*;                                          
   IF _ACX * _ADX * _BCX * _BDX = 0 THEN DO;  *--ITS 2 VERTICAL LINES;  
     IF (MIN(&L2Y1,&L2Y2) LE &L1Y1 LE MAX(&L2Y1,&L2Y2))  OR             
        (MIN(&L2Y1,&L2Y2) LE &L1Y2 LE MAX(&L2Y1,&L2Y2)) THEN _COFLAG=1; 
     END;                                                               
   %_GOBACK;                                                            
   END;                                                                 
 *--CALCULATE INTERSECTION--;                                           
 _R=0;  IF _A1 NE 0 THEN _R=1/(1 + ABS(_A2/_A1));                       
 &XX=&L1X1 + (&L1X2-&L1X1)*_R;                                          
 &YX=&L1Y1 + (&L1Y2-&L1Y1)*_R;                                          
 %IF &MODE=LINKED %THEN %STR( RETURN; );                                
  %ELSE %IF &ENDSTMT=ENDINSCT %THEN %DO;                                
   ENDINSCT:                                                            
   %END;                                                                
%ENDMAC:                                                                
 %IF &DROPVARS %THEN %DO;                                               
  DROP _R _A1 _A2 _ACX _ACY _ADX _ADY _BCX _BDY _BCY _BDX;              
  %END;                                                                 
 %MEND INSECT;                                                          
                                                                        
 /* -----SAMPLE INVOCATIONS--------------------------------------       
DATA INSECT1;                                                           
  LENGTH DEFAULT=4;                                                     
  INPUT L1X1 L1Y1 L1X2 L1Y2  L2X1 L2Y1 L2X2 L2Y2;                       
  %INSECT(DEBUG=0)                                                      
  *--INVOKE IT A SECOND TIME, IN-LINE.  WE REVERSE THE LINES, JUST TO   
     SHOW THAT THE OPERATION IS COMMUTATIVE AND TO AVOID REPEATING-;    
  %INSECT(DROPVARS=0,XYVARS=L2X1 L2Y1 L2X2 L2Y2 L1X1 L1Y1 L1X2 L1Y2,    
    XX=XX2,YX=YX2,DEBUG=1,                                              
    ENDSTMT=END2)                                                       
END2:  *--END2 IS VALUE OF ENDSTMT PARM SO INSECT GOES HERE TO "RETURN";
 PUT / XX2= YX2=;                                                       
 CARDS;                                                                 
 0 0 5 5  0 0 2 10                                                      
 0 0 5 5  5 0 0 5                                                       
 PROC PRINT;   RUN;                                                     
 *-----NOW INVOKE IT AS A LINKED-TO ROUTINE.  SHOULD PRODUCE RESULTS    
       SIMILAR TO PREVIOUS STEP--;                                      
DATA INSECT2; SET INSECT1(KEEP=L1X1 L1Y1 L1X2 L1Y2 L2X1 L2Y1 L2X2 L2Y2);
  LENGTH DEFAULT=4;                                                     
  LINK INSECT;                                                          
  XX1=XX;  YX1=YX;                                                      
  ARRAY L1(4) L1X1--L1Y2;  ARRAY L2(4) L2X1--L2Y2;                      
  ARRAY SAVE(4) _TEMPORARY_;  DROP I;                                   
  DO I=1 TO 4;  SAVE(I)=L2(I); L2(I)=L1(I);  L1(I)=SAVE(I);  END;       
  LINK INSECT;  XX2=XX;  YX2=YX;                                        
  PUT / _ALL_;                                                          
 %INSECT(MODE=LINKED,DEBUG=1)                                           
PROC PRINT DATA=INSECT2;  RUN;                                          
   -------------------END SAMPLES----------------------- */             
