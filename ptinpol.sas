*---THIS IS PTINPOL.SAS---*;                                            
* this module will determine whether a point is inside, outside, or on  
  the boundaries of a polygon.  parameters specify the names or vars    
  and arrays containing the necessary input values as well as the vars  
  to receive the results.                                               
  this macro invokes the insect macro, which it assumes has been loaded 
  or is available via autocall.                                         
  CODED BY JOHN BLODGETT MODELED AFTER ALGORITHM TAKEN FROM THE         
  DACS PROGRAM WRITTEN BY THE CENSUS USE STUDY (FARNSWORTH & WHITE)     
  CIRCA 1971.;                                                          
 %LET REVDATE=21APR90;                                                  
%MACRO PTINPOL(                                                         
 mode=inline,  /* default mode value results in generation of "inline"  
      code, suitable for applications where you only need to invoke     
      the algorithm once in a data step.  specify a value of            
      "linked" to cause generation of a linked-to routine named ptinpol.
      see sample invocations below */                                   
 endstmt=ENDPTINP, /* when mode=inline control transfers to this stmt   
      when calculations are finished.  the endptinp label will be       
      generated by the macro.  any other value requires the user to     
      code the label in the invoking program. */                        
 ax=ax, ay=ay, /* names of the arrays (already declared before invoking 
      ptinpol) which contain the ordered list of x-y coordinates on the 
      boundary of the polygon */                                        
 x=x, y=y,  /* names the variables with the x,y coordinates of the      
               point in question. */                                    
 npts=npts,  /* name of variable containing the # of points (vertices)  
      on the polygon */                                                 
 inout=inout,  /* name of a character variable which gets assigned a    
      value of 'in ', 'out' or 'on ' by the routine (the 'answer') */   
 maxmins=xmin xmax ymin ymax, /* list of 4 variable names where the     
      extrema values for the polygon are stored.  routine will use the  
      current values (if defined), otherwise it will calculate them */  
 fuzz=.00001, /* during algorithm to count number of times a vertical   
      line from point cuts the boundary of the polygon, it is           
      sometimes necessary to move the search point slightly to avoid    
      rare cases where the vertical line intersects at a node.  when    
      these cases occur the value of fuzz is used to offset */          
                                                                        
 debug=0);                                                              
                                                                        
 %LET MODE=%UPCASE(&MODE);                                              
 %IF &MODE=LINKED %THEN %DO;                                            
   RETURN;                                                              
 PTINPOL: *---LINKED-TO ROUTINE GENERATED BY PTINPOL MACRO---*;         
  %END;                                                                 
  %LET MAXMINS=%UPCASE(&MAXMINS);                                       
   %LET XMIN=%SCAN(&MAXMINS,1);  %LET XMAX=%SCAN(&MAXMINS,2);           
   %LET YMIN=%SCAN(&MAXMINS,3);  %LET YMAX=%SCAN(&MAXMINS,4);           
 %IF &YMAX EQ %THEN %DO;                                                
   %PUT *****MAXMINS PARM MUST HAVE 4 ELEMENTS (XMIN, XMAX, YMIN,YMAX); 
   =================INTENTIONAL GARABAGE TO ABORT=================      
   %GOTO ENDMAC;                                                        
   %END;                                                                
                                                                        
 %IF &DEBUG %THEN %DO;  %*--DISPLAY PARMS--;                            
   %PUT ****PARMS SPECIFIED AND/OR ASSIGNED****;                        
   %PUT MODE= &MODE;  %PUT ENDSTMT= &ENDSTMT;  %PUT MAXMINS= &MAXMINS;  
   %PUT XMIN=&XMIN  XMAX=&XMAX  YMIN=&YMIN  YMAX=&YMAX;                 
   %PUT X=&X  Y=&Y;                                                     
   %PUT AX=&AX  AY=&AY  NPTS=&NPTS;                                     
   %PUT INOUT=&INOUT;                                                   
   %PUT;                                                                
   %END;                                                                
                                                                        
 %MACRO _GOBACK2; %*---UTILITY SUBMACRO TO EXECUTE A "RETURN"--;        
   %IF &MODE=LINKED %THEN %STR( RETURN);                                
    %ELSE %STR( GO TO &ENDSTMT;);                                       
   %MEND _GOBACK2;                                                      
 &INOUT='???';                                                          
 IF &NPTS LE 2 OR &X=. OR &Y=. THEN %_GOBACK2;                          
                                                                        
 *--CHECK FOR DEFINED EXTREMA, AND CALCUALTE IF NECESSARY--;            
 IF N(OF &MAXMINS) LT 4 THEN DO;                                        
   &XMIN=&AX(1);  &XMAX=&XMIN;  &YMIN=&AY(1);  &YMAX=&YMIN;             
   DO _II_=2 TO &NPTS;                                                  
     IF &AX(_II_) LT &XMIN THEN &XMIN=&AX(_II_);                        
      ELSE IF &AX(_II_) GT &XMAX THEN &XMAX=&AX(_II_);                  
     IF &AY(_II_) LT &YMIN THEN &YMIN=&AY(_II_);                        
      ELSE IF &AY(_II_) GT &YMAX THEN &YMAX=&AY(_II_);                  
     END;                                                               
   END;                                                                 
 &INOUT='OUT';                                                          
 IF &X LT &XMIN OR &X GT XMAX OR &Y LT &YMIN OR &Y GT &YMAX THEN        
   %_GOBACK2;                                                           
 COUNTXS:  
 *--In following loop we check the given point (&x,&y) to     
   see if a vertical line drawn from the point to (&x,&ymin) crosses    
   (intersects) the boundary of the polygon.  if it does just once      
   then the point is in the poly.  if it never crosses or crosses       
   twice then its outside the polygon.  it may also be on the bdry      
   which we also check for.  in general, an odd # of crossing means     
   in, an even # means out.  the _ii_ index steps us thru the array     
   of vertex coords;                                                    
   DO _II_=1 TO &NPTS;                                                  
     _IIP1_=_II_+1;  IF _II_=&NPTS THEN _IIP1_=1;                       
     IF &AX(_II_) NE &AX(_IIP1_) OR &AY(_II_) NE &AY(_IIP1_) THEN DO;   
       *--QUALIFYING IF ABOVE AVOIDS PROCESSING (.,.) DUMMY POINTS AND  
          CASES WHERE FIRST POINT WAS REPEATED AS LAST--*;              
       IF (&X EQ &AX(_II_) AND &Y EQ &AY(_II_)) THEN DO;                
         &INOUT='ON ';  %_GOBACK2                                       
         END;                                                           
       *--WE invoke the insect macro in-line to determine if our vert.  
          line crosses this link of the polygon perimetr--;             
       _XI=&AX(_II_);  _YI=&AY(_II_);                                   
       _XIP1=&AX(_IIP1_);_YIP1=&AY(_IIP1_);                             
       %INSECT(XX=_XX, YX=_YX,                                          
          XYVARS=&X &Y &X &YMIN _XI _YI _XIP1 _YIP1)                    
       IF _COFLAG THEN DO;                                              
         %IF &DEBUG %THEN %DO; PUT &X= &Y= _COFLAG= '*****'; %END;      
         IF MIN(_YI,_YIP1) LE &Y LE MAX(_YI,_YIP1) THEN DO;             
           &INOUT='ON ';  %_GOBACK2                                     
           END;                                                         
         END;                                                           
       ELSE IF _XX NE . THEN DO; *--WE HAVE A CROSSING;                 
         *--If it just touches a node its a special case which we deal  
            with by offsetting our original x value and starting over   
            again with search--;                                        
         IF _XX EQ _XI AND _YX EQ _YI THEN DO;                          
           &X=&X + &FUZZ;  &INOUT='OUT';  GOTO COUNTXS;                 
           END;                                                         
         *--ITS A NORMAL CROSSING;                                      
         IF &INOUT='IN ' THEN &INOUT='OUT'; ELSE &INOUT='IN ';          
         END;                                                           
       END;                                                             
     END;  *--DO OVER _II_ LOOP;                                        
                                                                        
 %IF &MODE=LINKED %THEN %STR( RETURN; );                                
  %ELSE %IF &ENDSTMT=ENDPTINP %THEN %DO;                                
   ENDPTINP:                                                            
   %END;                                                                
%ENDMAC:                                                                
 %MEND PTINPOL;                                                         
