#! /usr/bin/perl

###
# install a sas macro and the .html file
# Remember to update macmenu2.js
#
#   installmac [-i] [-u] [-d dir] mac mac ...
###

use Getopt::Std;
&getopts('itud:');

$htmlbase = '/datavis/sasmac';
$sdir = $opt_d;
$sdir .= '/' if ($sdir && $sdir !=~ m|.*/$|);
$testing = $opt_t;
$testing = 1;
$interactive = $opt_i;
$interactive = 1;
$uninstall = $opt_u;

$sasmac='/home/friendly/datavis.ca/sasmac';
#$serverbase='/home/ftp/pub/sas/macros';
$serverbase='/home/friendly/datavis.ca/sas/macros';
$macdir='/home/friendly/sasuser/macros';

$xref="$sasmac/.xref";
$menu="$sasmac/.menu2";

for $mac (@ARGV) {
#   make "$mac.html";
    if ($uninstall) {
        &myunlink ("$sasmac/$mac.html");
        &myunlink ("$serverbase/$sdir$mac.sas");
    }
    else {
        unless (-f "$mac.html") {
            warn("$mac.html does not exist\n");
#            next;
            }
        &move ("$mac.html", $sasmac);
        &link ("$macdir/$mac.sas", "$serverbase/$sdir");
   }    
}

sub make {
}

sub copy {
    $source = shift;
    $target = shift;
    my $cmd = "cp -p $source $target";
    if ($interactive) {
        return unless &yn("$cmd [n]? ");
#        print "? cp -p $source $target\n";
#        return;
    }
	system($cmd) && die("can't copy $source\n");
    
}

sub move {
    $source = shift;
    $target = shift;
    my $cmd = "mv $source $target";
    if ($interactive) {
        return unless &yn("$cmd [n]? ");
#        print "? cp -p $source $target\n";
#        return;
    }
	system($cmd) && die("can't move $source\n");
    
}

sub link {
    $source = shift;
    $target = shift;
    my $cmd = "ln -s $source $target";
    if ($interactive) {
        return unless &yn("$cmd [n]? ");
    }
	system($cmd) && die("can't link $source to $target\n");
}

sub myunlink {
    $source = shift;
    my $cmd = "rm $source";
    if ($interactive) {
        return unless &yn("$cmd [n]? ");
    }
	system($cmd) && die("can't remove $source\n");
}

sub yn {
    local($prompt) = @_;
    local($answer);
    local($default) = $prompt =~ m/\[([yn])\]\s*$/i;
    print STDERR $prompt;
    chop($answer = <STDIN>);
    $answer = $default if $answer =~ m/^\s*$/;
    ($answer =~ m/^[yY]/);
}




